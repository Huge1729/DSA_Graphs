132. Palindrome Partitioning II

// Only (32/36) test case running 
// Memory limit exceeded


class Solution {
public:

// int min_cost = INT_MAX;
bool check(string st){
    // cout<<st<<endl;
    string st_ = st;
    reverse(st.begin() , st.end());
    return (st_ == st); 
}

int solve(int j , string s , vector<int>&dp){

    if(j == s.length()){
       return 0;
    }

    if(dp[j] != -1) return dp[j];
    
    int min_cost = INT_MAX; 

    for(int i = j; i<s.length(); i++){

        if(check(s.substr(j, i-j+1))){

            min_cost = min(min_cost , (1 + solve(i+1 , s, dp)));

        }
    }
    return dp[j] = min_cost ;
}

    int minCut(string s) {
        vector<int>dp(s.length(), -1);
        return solve(0 , s , dp) - 1;
        //  A | B | C ----> third partition auto maticclly occur and it would be     plaindrome for sure
    }
};


****************************************** SECOND APPROACH ********************************************************
// Step 1: Firstly, I have taken all substrings and checked that it is palindrome or not and stored in check matrix. For doing this, I have used gap strategy to do in O(n^2).
// Step 2: Now, for each i, I have stored all indexes such that s[i]....s[j] is a palindrome.
// Step 3: Now applied dp with memoisation to find minimum partitions.
class Solution {
public:

    vector<int> adj[2005];
    int dp[2005];


    int help(int i,int n){
        if(i==n){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int ans=1e9;
        
        for(auto x:adj[i]){
            int tmp=1+help(x+1,n);
            ans=min(ans,tmp);
        }
        return dp[i]=ans;
    }


    int minCut(string s) {
        int n=s.size();
        int check[n][n];      //to store palindromic status of each substring
        for(int g=0;g<n;g++){
            for(int i=0,j=g;j<n;i++,j++){
                if(g==0){
                    check[i][j]=1;
                }
                else if(g==1){
                    check[i][j]=(s[i]==s[j]);
                }
                else{
                    check[i][j]=(check[i+1][j-1]==1 ? (s[i]==s[j] ? 1 : 0) : 0);
                }
            }
        }
        
        //storing all indexes j in adj[i] such that s[i]...s[j] is palindrome
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(check[i][j]){
                    adj[i].push_back(j);
                }
            }
        }

        memset(dp,-1,sizeof(dp));
        return help(0,n)-1;       
    }  
};
