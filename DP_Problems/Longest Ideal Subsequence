2370. Longest Ideal Subsequence

class Solution {
public:
    int longestIdealString(string s, int k) {
        int n = s.length();

        vector<int>t(26,0);
        int result = 0;
        for(int i = 0; i<n; i++){
            int curr = s[i]-'a';
            int left = max(0 , curr - k);
            int right = min(25 , curr + k);

            int longest = 0;
            for(int j = left; j <= right ; j++){
                longest = max(longest , t[j]);
            }

            t[curr] = max(t[curr] , longest+1);
            result = max(result , t[curr]);
        }
        return result;
    }
};
// **** MEMORY LIMIT
// int solve(string s , int k , int index , int prev){
//     if(index == s.length()) return 0;
//     char curr = s[index];
//     int ntake = 0 + solve(s , k , index + 1 , prev);
//     int take = 0;
//     if(prev == -1 || abs(int(curr) - prev) <= k) take = 1 + solve(s , k ,index + 1, int(curr));
//     return max(take , ntake);
// }


// ******* TLE
 // vector<int>dp(n , 1);
        // int ans = 1;
        // for(int i = 0; i<n; i++){
        //     for(int j = 0; j < i; j++){
        //         if(abs(int(s[j]) - int(s[i]))  <= k ){
        //             // cout<<nums[j]<<" ";
        //             dp[i] = max(dp[i] , 1 + dp[j]);
        //         }
        //         ans = max(ans, dp[i]);
        //     }
        //     // cout<<dp[i]<<" ";
        // }    
        // return ans;
