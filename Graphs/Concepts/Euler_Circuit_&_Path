class Solution {
public:

void DFS(int u, vector<int>adj[] , vector<bool>&visited){
    visited[u] = true;
    
    for(auto it = adj[u].begin(); it != adj[u].end(); it++){
        int num = *it;
        if(visited[num] == false){
            DFS(num , adj , visited);
        }
    }
}

bool isConnected(int v , vector<int>adj[]){
    int nonZeroVertex = -1;
    for(int i = 0; i < v; i++){
        if(adj[i].size() != 0){
            nonZeroVertex = i;
            break;
        }
    }
    
    vector<bool>visited(v , 0);
    DFS(nonZeroVertex , adj,visited);
    
    for(int i = 0; i < v; i++){
        if(visited[i] == false && adj[i].size() > 0){
            return false;
        }
    }
    return true;
}


// void count(vector<int>&degree , int v , vector<int>adj[]){
    // for(int i = 0; i<v; i++){
    //     for(auto it = adj[i].begin(); it != adj[i].end(); it++){
    //         degree[*it]++;
    //   }
    // }
// }


// Ecuer Circuit and Ecular Path 

// E.P => All the edges visited only once  -----> odd degree == 2 
// E.C => All the edges visited only once and start == End  ----> odd degree == 0
	int isEulerCircuit(int V, vector<int>adj[]){
	    // Code here
	    
	    if(isConnected(V , adj) == false){
	        return 0;
	    }
	    
	    
	    int odd_degree = 0;
	    for(int i = 0; i<V; i++){
	        if(adj[i].size() % 2 != 0){
	            odd_degree++;
	        }
	    }
	    
	    if(odd_degree == 0){
	        return 2;
	    }
	    
	    if(odd_degree == 2){
	        return 1;
	    }
	    
	    return 0;
	    
	    
	}
};
