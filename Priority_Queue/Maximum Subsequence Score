2542. Maximum Subsequence Score
T.C ----------> nlog(n) 
S.C----------->O(n)



class Solution {
public:
        
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        int n = nums1.size();
        vector<pair<int,int>>vec;

        for(int i = 0; i<n; i++){
            vec.push_back({nums2[i] , nums1[i]});
        }
        auto lamda = [&](auto &p1 , auto &p2){
            return p1.first > p2.first;
        };
        sort(vec.begin() , vec.end() , lamda);

        // for(auto i : vec) cout<<i.first<<" " << i.second<<endl;
        // cout<<endl;

        long long ans = 0;
        long long sum = 0;
        priority_queue<int , vector<int> , greater<int>>pq;

        for(int i = 0; i<k; i++){
            sum += vec[i].second;
            pq.push(vec[i].second);
        }
        ans = max(ans , sum * vec[k-1].first);

        for(int i = k; i<n; i++){
            int mini = vec[i].first;
            int u = pq.top();
            pq.pop();
            sum = sum - u;
            sum += vec[i].second;
            pq.push(vec[i].second);
            long long total = sum * mini;
            if(total > ans) ans = total;
        }
        return ans;
    }
};

 // priority_queue<pair<int,int>>pq_1;
        // priority_queue<pair<int,int>>pq_2;
        // int n = nums1.size();

        // for(int i = 0; i<n; i++){
        //     pq_1.push({nums1[i] ,i});
        //     pq_2.push({nums2[i] ,i});
        // }

        // int k1 = k;
        // int mini = 1e9;
        // long long total = 0;
        // long long ans = 0;
        // while(k1--){
        //     int num = pq_1.top().first;
        //     total += num;
        //     int idx = pq_1.top().second;
        //     mini = min(mini , nums2[idx]);
        //     cout<<num<<" "<<mini<<" ";
        //     pq_1.pop();
        // }
        // cout<<endl;

        // ans = total * mini;

        // k1 = k;
        // total = 0;
        // while(k1--){
        //     mini = pq_2.top().first;
        //     total +=  nums1[pq_2.top().second];
        //     pq_2.pop();
        // }

        // long long ans1 = total*mini;
        // ans = max(ans , ans1);
        // return ans;

